import{xApp}from"./xapp.js";class ConnectionTimedout extends Error{constructor(){super("Server tidak merespon")}}xApp.login=function(a,b){return xApp.cookieEnabled()||alert("Cookie pada browser Anda tidak diaktifkan!\nBeberapa fitur mungkin tidak berjalan dengan semestinya"),xApp.deleteCookie("access_token"),new Promise((c,d)=>{setTimeout(function(){d(new ConnectionTimedout)},5e3),fetch(xApp.basePath+"/api/v0/users/login",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({email:a,password:b})}).then(c,d)}).then(xApp.handleHttpJSONResponse).then(a=>(xApp.setCookie("access_token",a.data.access_token,a.data.expires),xApp.setCookie("refresh_token",a.data.refresh_token,a.data.expires+144000000),a))},xApp.logout=function(){xApp.deleteCookie("access_token"),xApp.deleteCookie("refresh_token"),location=xApp.basePath},xApp.apiGet=async function(a){return xApp.apiCall(a,{})},xApp.apiPost=async function(a,b){let c={method:"POST"};return c="FormData"==b.constructor.name?Object.assign(c,{body:b}):Object.assign(c,{headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),xApp.apiCall(a,c)},xApp.apiPut=async function(a,b){let c={method:"PUT"};return c="FormData"==b.constructor.name?Object.assign(c,{body:b}):Object.assign(c,{headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),xApp.apiCall(a,c)},xApp.apiDelete=async function(a,b){let c={method:"DELETE"};return c="FormData"==b.constructor.name?Object.assign(c,{body:b}):Object.assign(c,{headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),xApp.apiCall(a,c)},xApp.refreshToken=async function(a){const b=await fetch(xApp.basePath+"/api/v0/auth/token",{headers:{"Content-Type":"application/json",Accept:"application/json"},method:"POST",body:JSON.stringify({refresh_token:xApp.getCookie("refresh_token")})}).then(xApp.handleHttpJSONResponse);return xApp.setCookie("access_token",b.data.access_token,b.data.expires),xApp.setCookie("refresh_token",b.data.refresh_token,b.data.expires),a()},xApp.apiCall=async function(a,b){const c={headers:{Accept:"application/json"}},d=c.headers,e=xApp.getCookie("access_token"),f=Object.assign(c,b),g=xApp.basePath+a;f.headers=Object.assign(d,b.headers),null!=e&&(f.headers.Authorization="Bearer "+e);try{return await fetch(g,f).then(xApp.handleHttpJSONResponse)}catch(a){switch(a.constructor.name){case"ResultException":if(401==a.httpStatus)return xApp.refreshToken(()=>(f.headers.Authorization="Bearer "+xApp.getCookie("access_token"),fetch(g,f).then(xApp.handleHttpJSONResponse))).catch(()=>("pageReff"in xApp||(xApp.pageReff=location.hash),void(location="#!/login")));case"JSONError":throw a;}}};class ApiClient{constructor(a,b){const c=Object.assign({baseEndPoint:"/api/v0",baseUrl:a,bearer:null},b);this.settings=c}async call(a,b){const c={headers:{Accept:"application/json"}},d=c.headers,e=Object.assign(c,b);e.headers=Object.assign(d,b.headers),null!=this.settings.bearer&&(e.headers.Authorization="Bearer "+this.settings.bearer);try{return await fetch(this.settings.baseUrl+this.settings.baseUrl+a,e).then(xApp.handleHttpJSONResponse)}catch(a){throw a}}get(a){return this.call(a,{})}post(a,b){let c={method:"POST"};return c="FormData"==b.constructor.name?Object.assign(c,{body:b}):Object.assign(c,{headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),this.call(a,c)}put(a,b){let c={method:"PUT"};return c="FormData"==b.constructor.name?Object.assign(c,{body:b}):Object.assign(c,{headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),this.call(a,c)}delete(a,b){let c={method:"DELETE"};return c="FormData"==b.constructor.name?Object.assign(c,{body:b}):Object.assign(c,{headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}),this.call(a,c)}}xApp.apiClient=function(a,b){return new ApiClient(a,b)};class XMLHttpRequestWrapper{constructor(a,b){const c={body:null,headers:{Accept:"application/json",Authorization:"Bearer "+xApp.getCookie("access_token")},method:"POST",responseType:"json",onUploadProgress:function(){},onFinish:function(){},onError:function(){},onAbort:function(){}},d=Object.assign(c,b);let e=new XMLHttpRequest;for(const c in e.open(d.method,xApp.basePath+a,!0),d.headers)e.setRequestHeader(c,d.headers[c]);e.responseType=d.responseType,e.upload&&e.upload.addEventListener("progress",function(a){a.lengthComputable&&d.onUploadProgress(a)}),e.addEventListener("error",d.onError),e.addEventListener("abort",d.onAbort),e.addEventListener("load",async()=>{[200,201,204].includes(e.status)?d.onFinish(e.response):401==e.status?xApp.refreshToken(()=>{const b=new XMLHttpRequest;for(const c in b.open(d.method,xApp.basePath+a,!0),d.headers.Authorization="Bearer "+xApp.getCookie("access_token"),d.headers)b.setRequestHeader(c,d.headers[c]);b.responseType=d.responseType,b.upload&&b.upload.addEventListener("progress",function(a){a.lengthComputable&&d.onUploadProgress(a)}),b.addEventListener("error",d.onError),b.addEventListener("abort",d.onAbort),b.addEventListener("load",function(){if([200,201].includes(b.status))d.onFinish(b.response);else throw"upload error"}),e=b,b.send(d.body)}).catch(()=>{if("pageReff"in xApp)return xApp.pageReff=location.hash,void(location="#!/login")}):d.onError(new Error(e.statusText))}),this.xhr=e,this.settings=d}send(){this.xhr.send(this.settings.body)}abort(){this.xhr.abort()}}xApp.apiXMLHttpRequest=function(a,b){return new XMLHttpRequestWrapper(a,b)};